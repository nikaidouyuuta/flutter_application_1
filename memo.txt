Todoアプリ。とりあえず、タスクを追加とそれを削除するボタンだけ

＋でタスク追加。
ゴミ箱で削除
それだけ
homepage_todoから、taskpageに遷移


homepage_todo.dart
taskpage.dart





6/4
homepage_todo.dart

import 'package:flutter/material.dart';
import 'package:flutter_application_1/taskpage.dart';
import 'package:shared_preferences/shared_preferences.dart'; // shared_preferencesをインポート
import 'dart:convert'; // JSONエンコード/デコードのためにインポート

// HomePageウィジェットを定義。状態を持つためStatefulWidgetを使用
class HomePage extends StatefulWidget {
  const HomePage({super.key}); // コンストラクタ

  @override
  State<HomePage> createState() => _HomePageState();
}

// HomePageウィジェットの状態を管理するクラス
class _HomePageState extends State<HomePage> {
  // タスクのリストを定義。各タスクは「タイトル」と「内容」を持つMapとして保持
  List<Map<String, dynamic>> tasks = []; // ★変更: dynamic型を許容するように変更

  // ★: ウィジェットが最初に作成されるときに呼び出される
  @override
  void initState() {
    super.initState();
    _loadTasks(); // ★: アプリ起動時に保存されたタスクを読み込む
  }

  // ★: SharedPreferencesからタスクを読み込む非同期メソッド
  Future<void> _loadTasks() async {
    final prefs =
        await SharedPreferences.getInstance(); // SharedPreferencesのインスタンスを取得
    final String? tasksString =
        prefs.getString('tasks'); // 'tasks'というキーで保存されたJSON文字列を取得

    if (tasksString != null) {
      // JSON文字列をDartのList<dynamic>にデコード
      final List<dynamic> decodedTasks = json.decode(tasksString);
      setState(() {
        // デコードしたリストをList<Map<String, String>>型に変換し、tasksリストを更新
        // .from(item) を使うことで、dynamic型からMap<String, String>への安全なキャストを行う
        tasks = decodedTasks.map((item) {
          final taskMap = Map<String, dynamic>.from(item);
          if (taskMap['isFavorite'] == null) {
            taskMap['isFavorite'] = false; // 既存のタスクにisFavoriteがない場合のデフォルト値
          }
          return taskMap;
        }).toList();
        _sortTasks(); // ★追加: ロード時にも並び替える
      });
    }
  }

  // ★: SharedPreferencesにタスクを保存する非同期メソッド
  Future<void> _saveTasks() async {
    final prefs =
        await SharedPreferences.getInstance(); // SharedPreferencesのインスタンスを取得
    // 現在のtasksリストをJSON形式の文字列にエンコードして保存
    // Mapのリストは直接保存できないため、JSON文字列に変換する必要がある
    await prefs.setString('tasks', json.encode(tasks));
  }

  // ★追加: タスクを並び替えるメソッド
  void _sortTasks() {
    setState(() {
      tasks.sort((a, b) {
        final bool isAFavorite = a['isFavorite'] ?? false;
        final bool isBFavorite = b['isFavorite'] ?? false;

        if (isAFavorite && !isBFavorite) {
          return -1; // aがお気に入りでbがお気に入りでない場合、aを先に
        } else if (!isAFavorite && isBFavorite) {
          return 1; // bがお気に入りでaがお気に入りでない場合、bを先に
        } else {
          return 0; // それ以外（両方お気に入り、または両方お気に入りでない）は元の順序を維持
        }
      });
    });
  }

// タスク追加ページへ遷移する非同期メソッド
  void _navigateToAddTaskPage() async {
    // TaskPageへ遷移し、戻り値（追加されたタスク情報）を待つ
    final result = await Navigator.push(
      context, // 現在のコンテキスト
      MaterialPageRoute(
          builder: (context) => const TaskPage()), // TaskPageへのルート
    );
    // resultがnullでなく、かつMap<String, String>型であることを確認
    if (result != null && result is Map<String, String>) {
      setState(() {
        // 取得したタスク情報をリストに追加
        tasks.add(result);
      });
      _sortTasks(); // ★追加: タスク追加後にも並び替える
      _saveTasks(); // ★: タスクが追加されたら、すぐに保存する
    }
  }

  // タスク編集ページへ遷移する非同期メソッド
  void _navigateToEditTaskPage(int index) async {
    final originalTask = tasks[index];
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => TaskPage(
          initialTitle: originalTask['title'] ?? '',
          initialDescription: originalTask['description'] ?? '',
        ),
      ),
    );
    if (result != null && result is Map<String, String>) {
      setState(() {
        tasks[index] = {
          ...result,
          'isFavorite': originalTask['isFavorite'] ?? false
        };
      });
      _sortTasks(); // ★追加: タスク編集後にも並び替える
      _saveTasks(); // ★: タスクが編集されたら、すぐに保存する
    }
  }

  // ★追加: お気に入り状態を切り替えるメソッド
  void _toggleFavorite(int index) {
    setState(() {
      tasks[index]['isFavorite'] = !(tasks[index]['isFavorite'] ?? false);
    });
    _sortTasks(); // ★追加: お気に入り状態変更後にも並び替える
    _saveTasks();
  }

  @override
  Widget build(BuildContext context) {
    // 画面全体の基本的な構造を提供するScaffoldウィジェット
    return Scaffold(
      // アプリケーションバーの設定
      appBar: AppBar(
        title: const Text('Todoリスト'), // アプリバーのタイトル
        // ★: AppBarの背景色をテーマのプライマリーカラーに設定
        backgroundColor: Theme.of(context).primaryColor,
        // ★変更: AppBarのテキストとアイコンの色を白に設定
        foregroundColor: Colors.white,
      ),
      // 画面のメインコンテンツ。タスクリストを表示するためにListView.builderを使用
      body: ListView.builder(
        itemCount: tasks.length, // リストの項目数（タスクの数）
        // 各リスト項目（タスク）を構築するためのビルダー関数
        itemBuilder: (context, index) {
          // 現在のインデックスに対応するタスク情報を取得
          final task = tasks[index];
          final bool isFavorite = task['isFavorite'] ?? false; // お気に入り状態を取得

          // 各タスクを表示するためのCardウィジェット
          return Card(
            margin: const EdgeInsets.symmetric(
                horizontal: 16, vertical: 8), // Cardの外側の余白
            shape: RoundedRectangleBorder(
              // Cardの形状を設定
              borderRadius: BorderRadius.circular(10), // 角を丸くする
              side: const BorderSide(color: Colors.grey), // 枠線の色を設定
            ),
            elevation: 2, // Cardの影の深さ
            // Card内のリスト項目を表示するためのListTileウィジェット
            child: ListTile(
              // ★追加: お気に入りボタン
              leading: IconButton(
                icon: Icon(
                  isFavorite
                      ? Icons.star
                      : Icons.star_border, // お気に入り状態に応じてアイコンを変更
                  color: isFavorite
                      ? Colors.amber
                      : Colors.grey, // お気に入り状態に応じて色を変更
                ),
                onPressed: () => _toggleFavorite(index), // クリックでお気に入り状態を切り替え
              ),
              title: Text(
                task['title'] ?? '',
                // ★変更: タイトルテキストのスタイルを太字、サイズ16に設定
                style:
                    const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
              // タスクのタイトルを表示 (nullの場合は空文字列)
              subtitle: Text(
                task['description'] ?? '',
                maxLines: 2, // ★: サブタイトルは最大2行まで表示
                overflow: TextOverflow.ellipsis, // ★: 2行を超えたら省略記号(...)を表示
              ), // タスクの内容を表示 (nullの場合は空文字列)
              onTap: () => _navigateToEditTaskPage(index), // タップで編集
              // リスト項目の末尾に表示されるウィジェット (削除ボタン)
              trailing: IconButton(
                icon: const Icon(Icons.delete), // 削除アイコン
                onPressed: () {
                  // ボタンが押された時の処理
                  setState(() {
                    tasks.removeAt(index);
                  });
                  _saveTasks(); // ★: タスクが削除されたら、すぐに保存する
                },
              ),
            ),
          );
        },
      ),
      // 画面右下に表示されるフローティングアクションボタン
      floatingActionButton: FloatingActionButton(
        onPressed: _navigateToAddTaskPage, // ボタンが押されたらタスク追加ページへ遷移するメソッドを呼び出す
        tooltip: 'タスクの追加',
        child: const Icon(Icons.add),
        // ★: ボタンの背景色をテーマのプライマリーカラーに設定
        backgroundColor: Theme.of(context).primaryColor,
        // ★: ボタンのアイコン色を白に設定
        foregroundColor: Colors.white,
      ),
    );
  }
}









5/21
task

import 'package:flutter/material.dart';

// TaskPageウィジェットを定義。状態を持たないのでStatelessWidgetを使用
class TaskPage extends StatelessWidget {
  final String? initialTitle;
  final String? initialDescription;

  const TaskPage({
    super.key,
    this.initialTitle,
    this.initialDescription,
  }); // コンストラクタ

  @override
  Widget build(BuildContext context) {
    // テキストフィールドの入力値を制御するためのコントローラーを作成
    final TextEditingController titleController =
        TextEditingController(text: initialTitle ?? ''); // タスク名入力用コントローラー
    final TextEditingController descriptionController = TextEditingController(
        text: initialDescription ?? ''); // タスク内容入力用コントローラー

    // 画面全体の基本的な構造を提供するScaffoldウィジェット
    return Scaffold(
      // アプリケーションバーの設定
      appBar: AppBar(
        title: const Text('タスク追加 / 編集'), // アプリバーのタイトル
      ),
      // 画面のメインコンテンツ。上下左右に16ピクセルの余白を追加
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        // 子要素を縦方向に並べるColumnウィジェット
        child: Column(
          // childrenリストにUI要素を配置
          children: [
            // タスク名を入力するためのテキストフィールド
            TextField(
              controller: titleController,
              decoration: const InputDecoration(
                labelText: 'タスク名',
                border: OutlineInputBorder(), // 枠線を表示
              ),
            ),
            const SizedBox(height: 20),
            // タスク内容を入力するためのテキストフィールド
            TextField(
              controller: descriptionController,
              decoration: const InputDecoration(
                labelText: 'タスク内容',
                border: OutlineInputBorder(),
              ),
              maxLines: 4, // 複数行対応
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                if (titleController.text.isNotEmpty &&
                    descriptionController.text.isNotEmpty) {
                  Navigator.pop(context, {
                    'title': titleController.text,
                    'description': descriptionController.text,
                  });
                }
              },
              child: const Text('保存'),
            ),
          ],
        ),
      ),
    );
  }
}













5/21
hometodo
import 'package:flutter/material.dart';
import 'package:flutter_application_1/taskpage.dart';

// HomePageウィジェットを定義。状態を持つためStatefulWidgetを使用
class HomePage extends StatefulWidget {
  const HomePage({super.key}); // コンストラクタ

  @override
  State<HomePage> createState() => _HomePageState();
}

// HomePageウィジェットの状態を管理するクラス
class _HomePageState extends State<HomePage> {
  // タスクのリストを定義。各タスクは「タイトル」と「内容」を持つMapとして保持
  List<Map<String, String>> tasks = [];

// タスク追加ページへ遷移する非同期メソッド
  void _navigateToAddTaskPage() async {
    // TaskPageへ遷移し、戻り値（追加されたタスク情報）を待つ
    final result = await Navigator.push(
      context, // 現在のコンテキスト
      MaterialPageRoute(
          builder: (context) => const TaskPage()), // TaskPageへのルート
    );
    // resultがnullでなく、かつMap<String, String>型であることを確認
    if (result != null && result is Map<String, String>) {
      setState(() {
        // 取得したタスク情報をリストに追加
        tasks.add(result);
      });
    }
  }

  // タスク編集ページへ遷移する非同期メソッド
  void _navigateToEditTaskPage(int index) async {
    final originalTask = tasks[index];
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => TaskPage(
          initialTitle: originalTask['title'] ?? '',
          initialDescription: originalTask['description'] ?? '',
        ),
      ),
    );
    if (result != null && result is Map<String, String>) {
      setState(() {
        tasks[index] = result; // 指定位置のタスクを更新
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    // 画面全体の基本的な構造を提供するScaffoldウィジェット
    return Scaffold(
      // アプリケーションバーの設定
      appBar: AppBar(
        title: const Text('Todoリスト'), // アプリバーのタイトル
      ),
      // 画面のメインコンテンツ。タスクリストを表示するためにListView.builderを使用
      body: ListView.builder(
        itemCount: tasks.length, // リストの項目数（タスクの数）
        // 各リスト項目（タスク）を構築するためのビルダー関数
        itemBuilder: (context, index) {
          // 現在のインデックスに対応するタスク情報を取得
          final task = tasks[index];

          // 各タスクを表示するためのCardウィジェット
          return Card(
            margin: const EdgeInsets.symmetric(
                horizontal: 16, vertical: 8), // Cardの外側の余白
            shape: RoundedRectangleBorder(
              // Cardの形状を設定
              borderRadius: BorderRadius.circular(10), // 角を丸くする
              side: const BorderSide(color: Colors.grey), // 枠線の色を設定
            ),
            elevation: 2, // Cardの影の深さ
            // Card内のリスト項目を表示するためのListTileウィジェット
            child: ListTile(
              title: Text(task['title'] ?? ''), // タスクのタイトルを表示 (nullの場合は空文字列)
              subtitle:
                  Text(task['description'] ?? ''), // タスクの内容を表示 (nullの場合は空文字列)
              onTap: () => _navigateToEditTaskPage(index), // タップで編集
              // リスト項目の末尾に表示されるウィジェット (削除ボタン)
              trailing: IconButton(
                icon: const Icon(Icons.delete), // 削除アイコン
                onPressed: () {
                  // ボタンが押された時の処理
                  setState(() {
                    tasks.removeAt(index);
                  });
                },
              ),
            ),
          );
        },
      ),
      // 画面右下に表示されるフローティングアクションボタン
      floatingActionButton: FloatingActionButton(
        onPressed: _navigateToAddTaskPage, // ボタンが押されたらタスク追加ページへ遷移するメソッドを呼び出す
        tooltip: 'タスクの追加',
        child: const Icon(Icons.add),
      ),
    );
  }
}













homeバクア

import 'package:flutter/material.dart';
import 'package:flutter_application_1/taskpage.dart';

// HomePageウィジェットを定義。状態を持つためStatefulWidgetを使用
class HomePage extends StatefulWidget {
  const HomePage({super.key}); // コンストラクタ

  @override
  State<HomePage> createState() => _HomePageState();
}

// HomePageウィジェットの状態を管理するクラス
class _HomePageState extends State<HomePage> {
  // タスクのリストを定義。各タスクは「タイトル」と「内容」を持つMapとして保持
  List<Map<String, String>> tasks = [];

// タスク追加ページへ遷移する非同期メソッド
  void _navigateToAddTaskPage() async {
    // TaskPageへ遷移し、戻り値（追加されたタスク情報）を待つ
    final result = await Navigator.push(
      context, // 現在のコンテキスト
      MaterialPageRoute(
          builder: (context) => const TaskPage()), // TaskPageへのルート
    );
    // resultがnullでなく、かつMap<String, String>型であることを確認
    if (result != null && result is Map<String, String>) {
      setState(() {
        // 取得したタスク情報をリストに追加
        tasks.add(result);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    // 画面全体の基本的な構造を提供するScaffoldウィジェット
    return Scaffold(
      // アプリケーションバーの設定
      appBar: AppBar(
        title: const Text('Todoリスト'), // アプリバーのタイトル
      ),
      // 画面のメインコンテンツ。タスクリストを表示するためにListView.builderを使用
      body: ListView.builder(
        itemCount: tasks.length, // リストの項目数（タスクの数）
        // 各リスト項目（タスク）を構築するためのビルダー関数
        itemBuilder: (context, index) {
          // 現在のインデックスに対応するタスク情報を取得
          final task = tasks[index];

          // 各タスクを表示するためのCardウィジェット
          return Card(
            margin: const EdgeInsets.symmetric(
                horizontal: 16, vertical: 8), // Cardの外側の余白
            shape: RoundedRectangleBorder(
              // Cardの形状を設定
              borderRadius: BorderRadius.circular(10), // 角を丸くする
              side: const BorderSide(color: Colors.grey), // 枠線の色を設定
            ),
            elevation: 2, // Cardの影の深さ
            // Card内のリスト項目を表示するためのListTileウィジェット
            child: ListTile(
              title: Text(task['title'] ?? ''), // タスクのタイトルを表示 (nullの場合は空文字列)
              subtitle:
                  Text(task['description'] ?? ''), // タスクの内容を表示 (nullの場合は空文字列)
              // リスト項目の末尾に表示されるウィジェット (削除ボタン)
              trailing: IconButton(
                icon: const Icon(Icons.delete), // 削除アイコン
                onPressed: () {
                  // ボタンが押された時の処理
                  setState(() {
                    tasks.removeAt(index);
                  });
                },
              ),
            ),
          );
        },
      ),
      // 画面右下に表示されるフローティングアクションボタン
      floatingActionButton: FloatingActionButton(
        onPressed: _navigateToAddTaskPage, // ボタンが押されたらタスク追加ページへ遷移するメソッドを呼び出す
        tooltip: 'タスクの追加',
        child: const Icon(Icons.add),
      ),
    );
  }
}








taskpage バックアップ

import 'package:flutter/material.dart';

class TaskPage extends StatelessWidget {
  const TaskPage({super.key});

  @override
  Widget build(BuildContext context) {
    final TextEditingController taskController = TextEditingController();

    return Scaffold(
      appBar: AppBar(
        title: const Text('タスク追加'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: taskController,
              decoration: const InputDecoration(
                labelText: 'タスク',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                if (taskController.text.isNotEmpty) {
                  Navigator.pop(context, taskController.text);
                }
              },
              child: const Text('追加'),
            ),
          ],
        ),
      ),
    );
  }
}




homepage_todoバックアップ



import 'package:flutter/material.dart';
import 'package:flutter_application_1/taskpage.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  List<String> tasks = [];

  void _navigateToAddTaskPage() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const TaskPage()),
    );
    if (result != null && result is String) {
      setState(() {
        tasks.add(result);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Todoリスト'),
      ),
      body: ListView.builder(
        itemCount: tasks.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(tasks[index]),
            trailing: IconButton(
              icon: const Icon(Icons.delete),
              onPressed: () {
                setState(() {
                  tasks.removeAt(index);
                });
              },
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _navigateToAddTaskPage,
        tooltip: 'タスクの追加',
        child: const Icon(Icons.add),
      ),
    );
  }
}




main.dart
バックアップ

import 'package:flutter/material.dart';
import 'package:flutter_application_1/HomePage.dart';
import 'package:flutter_application_1/MainPageWidget.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a purple toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: MainPageWidget(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // TRY THIS: Try changing the color here to a specific color (to
        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar
        // change color while the other colors stay the same.
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          //
          // TRY THIS: Invoke "debug painting" (choose the "Toggle Debug Paint"
          // action in the IDE, or press "p" in the console), to see the
          // wireframe for each widget.
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}





ジピティありがとう
